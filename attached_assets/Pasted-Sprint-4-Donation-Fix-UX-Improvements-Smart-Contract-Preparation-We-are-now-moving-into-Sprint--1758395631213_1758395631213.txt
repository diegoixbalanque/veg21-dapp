Sprint 4 – Donation Fix, UX Improvements, Smart Contract Preparation

We are now moving into Sprint 4 for the VEG21 dApp. Please follow these requirements step by step without removing or overwriting existing features from previous sprints:

1. Donation System Fix

Fix the issue where donation buttons are disabled.

Ensure users can donate tokens from their mock wallet balance to the community fund.

Record each donation as a transaction in the activity feed with amount, date, and purpose.

Update the balance and total donated stats accordingly.

Persist donations across refresh (via localStorage, consistent with current architecture).

2. UX/UI Enhancements

Improve the UserActivity feed:

Add clearer labels (e.g., "Reward Claimed", "Donation Made", "Challenge Joined").

Use simple but visually distinct icons or badges for each transaction type.

Improve the ChallengeProgressTracker:

Make milestone rewards visually more appealing (progress bar or milestone cards).

Ensure the "Claim" button is clearly visible and styled to encourage interaction.

Keep the style lightweight and consistent with the current Tailwind setup (no heavy redesign, just polish).

3. Smart Contract Integration Preparation

In the mockWeb3.ts service, add placeholder methods that mimic contract calls for:

stakeTokens(amount: number) → simulate locking tokens for challenges.

unstakeTokens() → simulate retrieving staked tokens after completing a challenge.

These methods should only update mock balances and create activity records for now, but structure them as if they were contract calls so we can later replace them with real Web3 integrations.

4. General Guidelines

Do not delete or refactor existing sprint work (wallet connect, rewards, activity feed). Extend and enhance only.

Ensure all new features persist correctly across refresh.

Keep code modular and aligned with the existing React + Vite + Tailwind architecture.

Deliverables for Sprint 4:

Fully functional donation flow (with transaction logging).

Enhanced UX for activity feed and challenge tracker.

Mock methods for staking/unstaking to prepare for smart contract integration.